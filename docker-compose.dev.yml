services:
  # PostgreSQL 数据库服务
  db:
    image: ankane/pgvector:latest
    container_name: pgvector-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-mytrading}
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-mytrading}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: redis-broker
    ports:
      - "6380:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Django 后端服务 (开发模式)
  web:
    build: ./backend
    container_name: mytrading-web
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    environment:
      - DB_NAME=mytrading
      - DB_USER=app
      - DB_PASSWORD=app
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB_CACHE=0
      - REDIS_DB_CELERY=1
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_STORAGE_BUCKET_NAME=trading-data
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=adminadmin
    volumes:
      - ./backend:/app  # 實時同步後端代碼
    restart: unless-stopped

  # React 前端服务 (开发模式 - Vite dev server)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # 我們需要創建這個文件
    container_name: mytrading-frontend-dev
    depends_on:
      - web
    ports:
      - "3000:3000"     # Vite dev server 端口
    volumes:
      - ./frontend:/app  # 實時同步前端代碼
      - /app/node_modules  # 保持 node_modules 在容器內
    environment:
      - CHOKIDAR_USEPOLLING=true  # 為了在 Docker 中正確檢測文件變化
    restart: unless-stopped

volumes:
  db-data:
  redis-data:
